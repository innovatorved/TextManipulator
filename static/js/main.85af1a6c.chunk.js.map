{"version":3,"sources":["comp/Navbar.js","comp/TextForm.js","comp/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","probs","className","mode","href","title","type","id","target","rel","cont","onClick","toggleMode","htmlFor","TextForm","props","useState","txt","setTxt","txtStyle","color","style","heading","backgroundColor","spellCheck","value","onChange","event","rows","toUpperCase","toLowerCase","split","map","word","charAt","slice","join","newTxt","navigator","clipboard","writeText","showAlert","filter","val","index","arr","length","defaultProps","Alert","alertMsg","role","msg","App","setMode","alertVar","setAlert","setTimeout","document","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.85af1a6c.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default function Navbar(probs) {\n    return (\n\t<nav className={`navbar navbar-expand-lg navbar-${probs.mode} bg-${probs.mode} font-link`}>\n        <div className=\"container-fluid\">\n          <a className=\"navbar-brand\" href=\"#\">{probs.title}</a>\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n            <span className=\"navbar-toggler-icon\"></span>\n          </button>\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n              <li className=\"nav-item\">\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\n              </li>\n              <li className=\"nav-item\">\n                  <a href=\"https://www.instagram.com/innovatorved/\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"nav-link\">{probs.cont}</a>\n              </li>\n            </ul>\n            <div className=\"form-check form-switch \">\n              <input className=\"form-check-input\" type=\"checkbox\" id=\"flexSwitchCheckDefault\" onClick={probs.toggleMode}/>\n              <label className={`form-check-label text-${probs.mode===\"light\"?\"dark\":\"light\"} mx-2`} htmlFor=\"flexSwitchCheckDefault\">Dark Mode</label>\n            </div>\n          </div>\n        </div>\n    </nav>\n    )\n}\n\nNavbar.propTypes = {\n  title : PropTypes.string.isRequired, // set required\n  cont : PropTypes.string,\n  mode : PropTypes.string,\n  toggleMode : PropTypes.func,\n}\n\n// We Can also set default proptypres\nNavbar.defaultProps = {\n  cont : \"Set-cont-Here\",\n  mode : \"light\",\n}\n\n","import React , {useState} from 'react';\nimport PropTypes from 'prop-types';\n// Use React Hooks & State\n\n\nexport default function TextForm(props) {\n    const [txt , setTxt] = useState(\"\");\n    /* \n        By default value of text set by useState func parameter\n        setTxt() - func use to cchange the text inside the txt var\n    \n    */\n    const handleOnChange=(event)=>{\n        // console.log(event);\n        setTxt(event.target.value);\n    }\n\n    const handleUpClick = () => {\n        /*\n            Change txt Variable in Upper Case & and usesetTxt func to change the txt\n        */\n        // console.log(\"Upper Case Clicked\" , txt);\n        setTxt(txt.toUpperCase()); // Change txt to Upper Case\n    }\n    const handleDownClick=()=>{\n        setTxt(txt.toLowerCase());\n    }\n    const titleCase = () => {\n        let title = txt.toLowerCase().split(\" \").map((word)=>{return (word.charAt(0).toUpperCase() + word.slice(1))});\n        setTxt(title.join(\" \"));\n    }\n    const RemoveExtraSpace = () => {\n        let newTxt  = txt.split(/[ ]+/).join(\" \");\n        setTxt(newTxt);\n    }\n\n    const RemoveExtraLine =()=>{\n        let newTxt = txt.split(/[\"\\n\"]+/).join(\"\\n\");\n        setTxt(newTxt);\n    }\n\n    // Stylesheet\n    // const [txtCol , setTxtCol] = useState(\"black\");\n    const txtStyle = {color : props.mode === \"light\"?\"#363845\":\"#DEE4CE\",};\n\n    const clipboard = ()=> {\n        /* Copy to ClipBoard */\n        navigator.clipboard.writeText(txt); \n        props.showAlert(\"Text Copied !\" , \"success\");\n    };\n    const clearTxt = () => {\n        setTxt(\"\");\n        props.showAlert(\"Text Cleared !\" , \"warning\");\n    }\n\n    return (\n        <>\n            <div className=\"container\" style={txtStyle}>\n                <h2 htmlFor=\"mybox\" className=\"font-link\"><b>{props.heading}</b></h2>\n                <div className=\"mb-3\">\n                <textarea style={{backgroundColor : props.mode===\"dark\"?\"#667574\":\"white\" , color : props.mode===\"dark\"?\"white\":\"black\"}} spellCheck=\"false\" className=\"form-control\" value={txt} onChange={handleOnChange} id=\"mybox\" rows=\"8\"></textarea>\n                </div>\n                <button className=\"btn btn-primary me-auto mb-2 mb-lg-0 mx-2 \" onClick={handleUpClick}>Convert to Upper Case</button>\n                <button className=\"btn btn-primary me-auto mb-2 mb-lg-0 mx-2\" onClick={handleDownClick}>Convert to Lower Case</button>\n                <button className=\"btn btn-primary me-auto mb-2 mb-lg-0 mx-2\" onClick={titleCase}>Change into Title Case</button>\n                <button className=\"btn btn-primary me-auto mb-2 mb-lg-0 mx-2\" onClick={RemoveExtraSpace}>Remove Extra Spaces</button>\n                <button className=\"btn btn-primary me-auto mb-2 mb-lg-0 mx-2\" onClick={RemoveExtraLine}>Remove Extra Lines</button>\n\n                <button className=\"btn btn-primary me-auto mb-2 mb-lg-0 mx-2\"  onClick={clipboard} title=\"Copt Text To ClipBoard\">Copy to Clipboard</button>\n                <button className=\"btn btn-primary me-auto mb-2 mb-lg-0 mx-2\" onClick={clearTxt}>Clear</button>\n            </div>\n            <div className=\"container my-3 \" style={txtStyle}>\n                <h2 className=\"font-link\">Text Summary</h2>\n                <p><b>{txt.split(\" \").filter(function(val,index, arr){return val !== \"\"}).length}</b> Words | <b>{txt.length}</b> Characters | <b>{txt.length===0?0:txt.split(\"\\n\").length}</b> line</p>\n                <p>Average time to read <b>{txt.length===0?0:0.008*txt.split(\" \").length}m</b></p>\n                <h3 className=\"font-link\">Wanna Read</h3>\n                <p>{txt.length>0?txt:\"---> Enter something in textbox to Preview\"}</p>\n            </div>\n        </>\n        \n    )\n}\n\nTextForm.propTypes = {\n    heading : PropTypes.string,\n}","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst firstTitleCase = (word) => {\n    return (\n        word.charAt(0).toUpperCase() + word.slice(1)\n    )\n}\n\nexport default function Alert(props){\n    return (\n        props.alertMsg && \n        <div>\n            <div className={`alert alert-${props.alertMsg.type} alert-dismissible fade show`} role=\"alert\">\n            <strong>{firstTitleCase(props.alertMsg.type)} </strong> {props.alertMsg.msg}\n            <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>\n            </div>\n        </div>\n    )\n}\n\nAlert.propTypes = {\n    alertMsg : PropTypes.object,\n}","import './App.css';\nimport Navbar from './comp/Navbar';\nimport TextForm from './comp/TextForm';\nimport {useState} from 'react';\nimport Alert from './comp/Alert';\n\nfunction App() {\n  const [mode,setMode] = useState(\"light\"); // Add useState darkMode\n  const toggleMode = ()=> {\n    /* \n      Use to Chanege the mode\n      Dark 2 Light\n          or\n      Light 2 Dark    \n    */\n    if (mode === \"light\"){\n      setMode(\"dark\");\n      document.body.style.backgroundColor = \"#32383e\";\n      showAlert(\"Dark Mode is Enable\" , \"success\");\n    }\n    else{\n      setMode(\"light\");\n      document.body.style.backgroundColor = \"#eef2e4\";\n      showAlert(\"Bright Mode is Enable\" , \"success\");\n    }\n  }\n\n  // Alert Setup\n  const [alertVar , setAlert] = useState(null);\n  const showAlert = (msg , type) => {\n    setAlert({\n      msg : msg,\n      type : type,\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 2000);\n  }\n\n  return (\n    <>\n        <Navbar title=\"TextManipulator\" cont=\"Contact\" mode={mode} toggleMode={toggleMode}/>\n        <Alert alertMsg={alertVar}/>\n        <div className=\"container my-3\">\n          <TextForm heading={\"Enter the text to analyze below \"} mode={mode} showAlert={showAlert} />\n        </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}